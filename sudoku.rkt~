;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname Untitled) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #t)))
#|

Sudoku game!

- why dont we first create the functionality to draw the sudoku board
- then add user input functionality
- then add sudoku solver/checker functionality

the sudoku board should be a list of Pos

some constant information:
- background

|#

(require spd/tags)
(require 2htdp/image)
(require 2htdp/universe)

;; ========= CONSTANTS

(define BG-LENGTH 600)
(define FONT 35)
(define COL "black")

(define BD-LENGTH 500)
(define C-OUTLINE 1.5)
(define U-OUTLINE (* 2.5 C-OUTLINE))
(define C-LENGTH (/ (- BD-LENGTH (+ (* C-OUTLINE 6) (* U-OUTLINE 4))) 9))

;---DO NOT ALTER THE CONSTANTS BELOW, just change the dimensions at the top---
(define CELL (square C-LENGTH "solid" "white"))
(define WCGAP (rectangle C-OUTLINE 1 "solid" "black"))
(define HCGAP (rectangle 1 C-OUTLINE "solid" "black"))

(define UNIT (above (beside CELL WCGAP CELL WCGAP CELL)
                    HCGAP
                    (beside CELL WCGAP CELL WCGAP CELL)
                    HCGAP
                    (beside CELL WCGAP CELL WCGAP CELL)))
(define WUGAP (rectangle U-OUTLINE 1 "solid" "black"))
(define HUGAP (rectangle 1 U-OUTLINE "solid" "black"))

(define MTS
  (overlay (above HUGAP
                  (beside WUGAP UNIT WUGAP UNIT WUGAP UNIT WUGAP)
                  HUGAP
                  (beside WUGAP UNIT WUGAP UNIT WUGAP UNIT WUGAP)
                  HUGAP
                  (beside WUGAP UNIT WUGAP UNIT WUGAP UNIT WUGAP)
                  HUGAP)
           (square BD-LENGTH "solid" "black")
           (empty-scene BG-LENGTH BG-LENGTH)))

(define START (+ (/ (- BG-LENGTH BD-LENGTH) 2) U-OUTLINE (/ C-LENGTH 2)))
(define XY-POS (list (+ START (* 8 C-LENGTH) (* 6 C-OUTLINE) (* 2 U-OUTLINE))))
;---DO NOT ALTER THE CONSTANTS ABOVE, just change the dimensions at the top---



;; ========= DATA DEFINITIONS

(@htdd Val)
;; Val is one of:
;;  - false
;;  - Natural
;; CONSTRAINT: if Natural is in [0,9]
;; interp. an empty spot, or a number

(@htdd Pos)
;; Pos is Natural
;; CONSTRAINT: Natural is in [0, 80]
;; interp. a position on the board
;;         the row is (quotient p 9)
;;         the column is (remainder p 9)

(define POS
  (list 0  1  2  3  4  5  6  7  8
        9  10 11 12 13 14 15 16 17
        18 19 20 21 22 23 24 25 26
        27 28 29 30 31 32 33 34 35
        36 37 38 39 40 41 42 43 44
        45 46 47 48 49 50 51 52 53
        54 55 56 57 58 59 60 61 62
        63 64 65 66 67 68 69 70 71
        72 73 74 75 76 77 78 79 80))

(@htdd Board)
;; Board is (listof Val)
;; CONSTRAINT: length of list is 81
;; interp. the sudoku board
;;         each element corresponds to the value at that position



;; ========= FUNCTIONS

(@htdf main)
(@signature Board -> Board)
;; start the world with (main BD0)

(define (main bd)
  (big-bang bd
    (to-draw  render-bd)))


(@htdf render-bd)
(@signature Board -> Image)
;; renders the image of the sudoku board

(define (render-bd bd)
  (place-image (text "1" FONT COL) (list-ref XY-POS 0)
               (list-ref XY-POS 0) MTS))



;;---HELPER FUNCTIONS---


(@htdf get-val)
(@signature Pos Board -> Val)
;; returns the value at the given position on the board

(define (get-val pos bd)
  (list-ref bd pos))


(@htdf get-row)
(@signature Pos -> Natural)
;; returns the row of the given position on the board

(define (get-row pos)
  (quotient pos 9))


(@htdf get-col)
(@signature Pos -> Natural)
;; returns the column of the given position on the board

(define (get-col pos)
  (remainder pos 9))